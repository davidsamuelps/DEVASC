1.- Variable names can contain only letters, numbers, and underscores. They can start with a letter or an underscore, but not with a number
2.- Spaces are not allowed in variable names, but underscores can be used to separate words in variable names
3.- Avoid using Python keywords and function names as variable names; that is, do not use words that Python has reserved for a particular programmatic purpose, such as the word print.

Python Keywords
Each of the following keywords has a specific meaning, and you’ll see an error if you try to use any of them as a variable name.

	False      await      else       import     pass
	None       break      except     in         raise
	True       class      finally    is         return
	and        continue   for        lambda     try
	as         def        from       nonlocal   while
	assert     del        global     not        with
	async      elif       if         or         yield
4.- Variable names should be short but descriptive. For example, name is better than n, student_name is better than s_n, and name_length is better than length_of_persons_name
5.- Be careful when using the lowercase letter l and the uppercase letter O because they could be confused with the numbers 1 and 0
6.- Adding Whitespace to Strings with Tabs or Newlines
 
To add a tab to your text, use the character combination \t as shown at ➊:

   >>> print("Python")
   Python
➊ >>> print("\tPython")
       Python

To add a newline in a string, use the character combination \n:

>>> print("Languages:\nPython\nC\nJavaScript")
Languages:
Python
C
JavaScript

You can also combine tabs and newlines in a single string. The string "\n\t" tells Python to move to a new line, and start the next line with a tab. The following example shows how you can use a one-line string to generate four lines of output:

>>> print("Languages:\n\tPython\n\tC\n\tJavaScript")
Languages:
    Python
    C
    JavaScript

7.- Stripping Whitespace

Python can look for extra whitespace on the right and left sides of a string. To ensure that no whitespace exists at the right end of a string, use the rstrip() method.

➊ >>> favorite_language = 'python '
➋ >>> favorite_language
   'python '
➌ >>> favorite_language.rstrip()
   'python'
➍ >>> favorite_language
   'python '

The value associated with favorite_language at ➊ contains extra whitespace at the end of the string. When you ask Python for this value in a terminal session, you can see the space at the end of the value ➋. When the rstrip() method acts on the variable favorite_language at ➌, this extra space is removed. However, it is only removed temporarily. If you ask for the value of favorite_language again, you can see that the string looks the same as when it was entered, including the extra whitespace ➍.

To remove the whitespace from the string permanently, you have to associate the stripped value with the variable name:

   >>> favorite_language = 'python '
➊ >>> favorite_language = favorite_language.rstrip()
   >>> favorite_language
   'python'

You can also strip whitespace from the left side of a string using the lstrip() method, or from both sides at once using strip():

➊ >>> favorite_language = ' python '
➋ >>> favorite_language.rstrip()
   ' python'
➌ >>> favorite_language.lstrip()
   'python '
➍ >>> favorite_language.strip()
   'python'

In this example, we start with a value that has whitespace at the beginning and the end ➊. We then remove the extra space from the right side at ➋, from the left side at ➌, and from both sides at ➍.

8.- Python defaults to a float in any operation that uses a float, even if the output is a whole number

9.- Underscores in Numbers
When you’re writing long numbers, you can group digits using underscores to make large numbers more readable:

>>> universe_age = 14_000_000_000

When you print a number that was defined using underscores, Python prints only the digits:

>>> print(universe_age)
14000000000

Python ignores the underscores when storing these kinds of values. Even if you don’t group the digits in threes, the value will still be unaffected. To Python, 1000 is the same as 1_000, which is the same as 10_00. This feature works for integers and floats, but it’s only available in Python 3.6 and later.

10.- Multiple Assignment
You can assign values to more than one variable using just a single line. This can help shorten your programs and make them easier to read; you’ll use this technique most often when initializing a set of numbers.

For example, here’s how you can initialize the variables x, y, and z to zero:

>>> x, y, z = 0, 0, 0

You need to separate the variable names with commas, and do the same with the values, and Python will assign each value to its respectively positioned variable. As long as the number of values matches the number of variables, Python will match them up correctly.

11.- Constants
A constant is like a variable whose value stays the same throughout the life of a program. Python doesn’t have built-in constant types, but Python programmers use all capital letters to indicate a variable should be treated as a constant and never be changed:

MAX_CONNECTIONS = 5000

When you want to treat a variable as a constant in your code, make the name of the variable all capital letters.


