1.- Looping through an entire list
	Let’s use a for loop to print out each name in a list of magicians:

		➊ magicians = ['alice', 'david', 'carolina']
		➋ for magician in magicians:
		➌     print(magician)

	We begin by defining a list at ➊, just as we did in Chapter 3. At ➋, we define a for loop. This line tells Python to pull a name from the list magicians,
	and associate it with the variable magician. At ➌ we tell Python to print the name that’s just been assigned to magician. Python then repeats lines ➋ and ➌,
	once for each name in the list. It might help to read this code as “For every magician in the list of magicians, print the magician’s name.” The output is
	a simple printout of each name in the list:

		alice
		david
		carolina
	
	A Closer Look at Looping:

		for magician in magicians:

	This line tells Python to retrieve the first value from the list magicians and associate it with the variable magician. This first value is 'alice'.
	Python then reads the next line:

    		print(magician)

	Python prints the current value of magician, which is still 'alice'. Because the list contains more values, Python returns to the first line of the loop:

		for magician in magicians:

	Python retrieves the next name in the list, 'david', and associates that value with the variable magician. Python then executes the line:

    		print(magician)

	Python prints the current value of magician again, which is now 'david'. Python repeats the entire loop once more with the last value in the list,
	'carolina'. Because no more values are in the list, Python moves on to the next line in the program. In this case nothing comes after the for loop,
	so the program simply ends.

	Keep in mind when writing your own for loops that you can choose any name you want for the temporary variable that will be associated with each value
	in the list.
	
2.- Doing More Work Within a for Loop

	You can do just about anything with each item in a for loop. Let’s build on the previous example by printing a message to each magician, telling them
	that they performed a great trick:

   		magicians = ['alice', 'david', 'carolina']
   		for magician in magicians:
		➊     print(f"{magician.title()}, that was a great trick!")

	The only difference in this code is at ➊ where we compose a message to each magician, starting with that magician’s name. The first time through the
	loop the value of magician is 'alice', so Python starts the first message with the name 'Alice'. The second time through the message will begin with
	'David', and the third time through the message will begin with 'Carolina'.

	The output shows a personalized message for each magician in the list:

		Alice, that was a great trick!
		David, that was a great trick!
		Carolina, that was a great trick!

	You can also write as many lines of code as you like in the for loop. Every indented line following the line for magician in magicians is considered
	inside the loop, and each indented line is executed once for each value in the list. Therefore, you can do as much work as you like with each value in the list.

	Let’s add a second line to our message, telling each magician that we’re looking forward to their next trick:

   		magicians = ['alice', 'david', 'carolina']
   		for magician in magicians:
       		  print(f"{magician.title()}, that was a great trick!")
	        ➊ print(f"I can't wait to see your next trick, {magician.title()}.\n")

	Because we have indented both calls to print(), each line will be executed once for every magician in the list. The newline ("\n") in the second print() call
	➊ inserts a blank line after each pass through the loop. This creates a set of messages that are neatly grouped for each person in the list:

		Alice, that was a great trick!
		I can't wait to see your next trick, Alice.

		David, that was a great trick!
		I can't wait to see your next trick, David.

		Carolina, that was a great trick!
		I can't wait to see your next trick, Carolina.

	You can use as many lines as you like in your for loops. In practice you’ll often find it useful to do a number of different operations with each item in a
	list when you use a for loop.

